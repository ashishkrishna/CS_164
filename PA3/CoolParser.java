
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CoolParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokenConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\010" +
    "\000\002\004\012\000\002\004\004\000\002\005\002\000" +
    "\002\005\003\000\002\005\004\000\002\013\006\000\002" +
    "\013\010\000\002\013\014\000\002\012\002\000\002\012" +
    "\003\000\002\012\004\000\002\011\005\000\002\011\006" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\006\000" +
    "\002\006\010\000\002\006\004\000\002\006\005\000\002" +
    "\006\011\000\002\006\012\000\002\006\010\000\002\006" +
    "\004\000\002\006\005\000\002\006\007\000\002\006\007" +
    "\000\002\007\004\000\002\007\005\000\002\015\003\000" +
    "\002\015\004\000\002\015\005\000\002\016\007\000\002" +
    "\010\003\000\002\010\005\000\002\010\004\000\002\010" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\003\006\004\010\001\002\000\010\002" +
    "\001\003\207\004\010\001\002\000\004\002\206\001\002" +
    "\000\006\002\uffff\043\205\001\002\000\010\002\ufffe\003" +
    "\ufffe\004\ufffe\001\002\000\004\055\011\001\002\000\006" +
    "\011\013\050\012\001\002\000\006\051\ufff9\056\017\001" +
    "\002\000\004\055\014\001\002\000\004\050\015\001\002" +
    "\000\006\051\ufff9\056\017\001\002\000\006\051\177\056" +
    "\017\001\002\000\006\044\021\045\022\001\002\000\006" +
    "\051\ufff8\056\ufff8\001\002\000\004\055\172\001\002\000" +
    "\006\046\ufff3\056\025\001\002\000\006\046\031\056\025" +
    "\001\002\000\006\046\ufff2\056\ufff2\001\002\000\004\044" +
    "\026\001\002\000\004\055\027\001\002\000\010\042\030" +
    "\046\ufff0\056\ufff0\001\002\000\006\046\uffef\056\uffef\001" +
    "\002\000\004\044\033\001\002\000\006\046\ufff1\056\ufff1" +
    "\001\002\000\004\055\034\001\002\000\004\050\035\001" +
    "\002\000\036\007\044\012\053\017\037\020\047\024\041" +
    "\025\045\027\050\041\052\045\054\050\036\052\042\053" +
    "\040\054\043\056\046\001\002\000\036\007\044\012\053" +
    "\017\037\020\047\024\041\025\045\027\050\041\052\045" +
    "\054\050\036\052\042\053\040\054\043\056\046\001\002" +
    "\000\036\007\044\012\053\017\037\020\047\024\041\025" +
    "\045\027\050\041\052\045\054\050\036\052\042\053\040" +
    "\054\043\056\046\001\002\000\110\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\027\uffe4\030" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\056\uffe4" +
    "\001\002\000\004\055\163\001\002\000\110\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\027" +
    "\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\056\uffe3\001\002\000\110\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\001\002" +
    "\000\036\007\044\012\053\017\037\020\047\024\041\025" +
    "\045\027\050\041\052\045\054\050\036\052\042\053\040" +
    "\054\043\056\046\001\002\000\036\007\044\012\053\017" +
    "\037\020\047\024\041\025\045\027\050\041\052\045\054" +
    "\050\036\052\042\053\040\054\043\056\046\001\002\000" +
    "\112\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\152\027\uffe1\030\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\045\075\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\056\uffe1\001\002\000\036\007" +
    "\044\012\053\017\037\020\047\024\041\025\045\027\050" +
    "\041\052\045\054\050\036\052\042\053\040\054\043\056" +
    "\046\001\002\000\036\007\044\012\053\017\037\020\047" +
    "\024\041\025\045\027\050\041\052\045\054\050\036\052" +
    "\042\053\040\054\043\056\046\001\002\000\026\030\062" +
    "\032\060\033\064\034\056\035\057\036\061\037\067\040" +
    "\063\047\066\051\131\001\002\000\036\007\044\012\053" +
    "\017\037\020\047\024\041\025\045\027\050\041\052\045" +
    "\054\050\036\052\042\053\040\054\043\056\046\001\002" +
    "\000\004\056\117\001\002\000\036\007\044\012\053\017" +
    "\037\020\047\024\041\025\045\027\050\041\052\045\054" +
    "\050\036\052\042\053\040\054\043\056\046\001\002\000" +
    "\026\030\062\032\060\033\064\034\056\035\057\036\061" +
    "\037\067\040\063\046\065\047\066\001\002\000\036\007" +
    "\044\012\053\017\037\020\047\024\041\025\045\027\050" +
    "\041\052\045\054\050\036\052\042\053\040\054\043\056" +
    "\046\001\002\000\036\007\044\012\053\017\037\020\047" +
    "\024\041\025\045\027\050\041\052\045\054\050\036\052" +
    "\042\053\040\054\043\056\046\001\002\000\036\007\044" +
    "\012\053\017\037\020\047\024\041\025\045\027\050\041" +
    "\052\045\054\050\036\052\042\053\040\054\043\056\046" +
    "\001\002\000\036\007\044\012\053\017\037\020\047\024" +
    "\041\025\045\027\050\041\052\045\054\050\036\052\042" +
    "\053\040\054\043\056\046\001\002\000\036\007\044\012" +
    "\053\017\037\020\047\024\041\025\045\027\050\041\052" +
    "\045\054\050\036\052\042\053\040\054\043\056\046\001" +
    "\002\000\004\056\110\001\002\000\036\007\044\012\053" +
    "\017\037\020\047\024\041\025\045\027\050\041\052\045" +
    "\054\050\036\052\042\053\040\054\043\056\046\001\002" +
    "\000\110\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\056\uffe5\001\002\000\004\055\071" +
    "\001\002\000\036\007\044\012\053\017\037\020\047\024" +
    "\041\025\045\027\050\041\052\045\054\050\036\052\042" +
    "\053\040\054\043\056\046\001\002\000\110\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\027" +
    "\uffe9\030\062\032\060\033\064\034\056\035\057\036\061" +
    "\037\067\040\063\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046" +
    "\uffe9\047\066\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\056\uffe9\001\002\000\004\040\072\001\002\000\004\056" +
    "\073\001\002\000\004\045\075\001\002\000\110\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025\uffde" +
    "\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\056\uffde\001\002\000\040\007\044\012\053\017\037" +
    "\020\047\024\041\025\045\027\050\041\052\045\054\046" +
    "\076\050\036\052\042\053\040\054\043\056\046\001\002" +
    "\000\110\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\056\uffd4\001\002\000\042\007\044" +
    "\012\053\017\037\020\047\024\041\025\045\027\050\041" +
    "\052\042\102\045\054\046\103\050\036\052\042\053\040" +
    "\054\043\056\046\001\002\000\070\007\uffce\012\uffce\017" +
    "\uffce\020\uffce\024\uffce\025\uffce\027\uffce\030\062\032\060" +
    "\033\064\034\056\035\057\036\061\037\067\040\063\041" +
    "\uffce\042\uffce\043\101\045\uffce\046\uffce\047\066\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\056\uffce\001\002\000" +
    "\044\007\uffcc\012\uffcc\017\uffcc\020\uffcc\024\uffcc\025\uffcc" +
    "\027\uffcc\041\uffcc\042\uffcc\045\uffcc\046\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc\001\002\000\036" +
    "\007\044\012\053\017\037\020\047\024\041\025\045\027" +
    "\050\041\052\045\054\050\036\052\042\053\040\054\043" +
    "\056\046\001\002\000\110\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\001\002" +
    "\000\026\030\062\032\060\033\064\034\056\035\057\036" +
    "\061\037\067\040\063\043\105\047\066\001\002\000\044" +
    "\007\uffcb\012\uffcb\017\uffcb\020\uffcb\024\uffcb\025\uffcb\027" +
    "\uffcb\041\uffcb\042\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\056\uffcb\001\002\000\066\007" +
    "\uffcd\012\uffcd\017\uffcd\020\uffcd\024\uffcd\025\uffcd\027\uffcd" +
    "\030\062\032\060\033\064\034\056\035\057\036\061\037" +
    "\067\040\063\041\uffcd\042\uffcd\045\uffcd\046\uffcd\047\066" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\056\uffcd\001" +
    "\002\000\110\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\024\uffeb\025\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\063\041\uffeb\042" +
    "\uffeb\043\uffeb\045\uffeb\046\uffeb\047\066\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\056\uffeb\001\002\000\004\045" +
    "\075\001\002\000\110\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\056\uffdf\001\002\000" +
    "\110\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024" +
    "\uffe7\025\uffe7\027\uffe7\030\062\032\060\033\064\034\056" +
    "\035\057\036\061\037\067\040\063\041\uffe7\042\uffe7\043" +
    "\uffe7\045\uffe7\046\uffe7\047\066\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\056\uffe7\001\002\000\110\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\027" +
    "\uffe8\030\062\032\060\033\064\034\056\035\057\036\061" +
    "\037\067\040\063\041\uffe8\042\uffe8\043\uffe8\045\uffe8\046" +
    "\uffe8\047\066\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\056\uffe8\001\002\000\110\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\024\uffee\025\uffee\027\uffee\030\uffee\032" +
    "\uffee\033\064\034\uffee\035\057\036\uffee\037\uffee\040\063" +
    "\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee\047\066\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\056\uffee\001\002" +
    "\000\110\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\024\uffec\025\uffec\027\uffec\030\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\063\041\uffec\042\uffec" +
    "\043\uffec\045\uffec\046\uffec\047\066\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\056\uffec\001\002\000\110\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed" +
    "\027\uffed\030\uffed\032\uffed\033\064\034\uffed\035\057\036" +
    "\uffed\037\uffed\040\063\041\uffed\042\uffed\043\uffed\045\uffed" +
    "\046\uffed\047\066\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\056\uffed\001\002\000\004\044\120\001\002\000\004" +
    "\055\121\001\002\000\006\010\122\026\123\001\002\000" +
    "\036\007\044\012\053\017\037\020\047\024\041\025\045" +
    "\027\050\041\052\045\054\050\036\052\042\053\040\054" +
    "\043\056\046\001\002\000\036\007\044\012\053\017\037" +
    "\020\047\024\041\025\045\027\050\041\052\045\054\050" +
    "\036\052\042\053\040\054\043\056\046\001\002\000\026" +
    "\010\125\030\062\032\060\033\064\034\056\035\057\036" +
    "\061\037\067\040\063\047\066\001\002\000\036\007\044" +
    "\012\053\017\037\020\047\024\041\025\045\027\050\041" +
    "\052\045\054\050\036\052\042\053\040\054\043\056\046" +
    "\001\002\000\110\005\uffda\006\uffda\007\uffda\010\uffda\012" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\024\uffda\025\uffda\027\uffda\030\062\032\060\033" +
    "\064\034\056\035\057\036\061\037\067\040\063\041\uffda" +
    "\042\uffda\043\uffda\045\uffda\046\uffda\047\066\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\056\uffda\001\002\000\110" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\027\uffd9\030\062\032\060\033\064\034\056\035" +
    "\057\036\061\037\067\040\063\041\uffd9\042\uffd9\043\uffd9" +
    "\045\uffd9\046\uffd9\047\066\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\056\uffd9\001\002\000\110\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\024\uffea\025\uffea\027\uffea" +
    "\030\062\032\060\033\064\034\056\035\057\036\061\037" +
    "\067\040\063\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\066\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\056" +
    "\uffea\001\002\000\004\043\132\001\002\000\006\051\ufff4" +
    "\056\ufff4\001\002\000\110\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\024\uffe6\025\uffe6\027\uffe6\030\062\032" +
    "\060\033\064\034\056\035\057\036\061\037\067\040\063" +
    "\041\uffe6\042\uffe6\043\uffe6\045\uffe6\046\uffe6\047\066\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\056\uffe6\001\002" +
    "\000\026\022\135\030\062\032\060\033\064\034\056\035" +
    "\057\036\061\037\067\040\063\047\066\001\002\000\004" +
    "\056\136\001\002\000\004\044\145\001\002\000\006\021" +
    "\142\056\136\001\002\000\010\021\uffd2\043\141\056\uffd2" +
    "\001\002\000\006\021\uffd1\056\uffd1\001\002\000\110\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\056\uffd6\001\002\000\004\043\144\001\002\000" +
    "\006\021\uffd0\056\uffd0\001\002\000\004\055\146\001\002" +
    "\000\004\023\147\001\002\000\036\007\044\012\053\017" +
    "\037\020\047\024\041\025\045\027\050\041\052\045\054" +
    "\050\036\052\042\053\040\054\043\056\046\001\002\000" +
    "\032\021\uffcf\030\062\032\060\033\064\034\056\035\057" +
    "\036\061\037\067\040\063\043\uffcf\047\066\056\uffcf\001" +
    "\002\000\110\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\056\uffe0\001\002\000\036\007" +
    "\044\012\053\017\037\020\047\024\041\025\045\027\050" +
    "\041\052\045\054\050\036\052\042\053\040\054\043\056" +
    "\046\001\002\000\110\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\032\060" +
    "\033\064\034\056\035\057\036\uffdc\037\uffdc\040\063\041" +
    "\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\047\066\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\056\uffdc\001\002\000" +
    "\110\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\063\041\uffdd\042\uffdd\043" +
    "\uffdd\045\uffdd\046\uffdd\047\066\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\056\uffdd\001\002\000\026\016\156\030" +
    "\062\032\060\033\064\034\056\035\057\036\061\037\067" +
    "\040\063\047\066\001\002\000\036\007\044\012\053\017" +
    "\037\020\047\024\041\025\045\027\050\041\052\045\054" +
    "\050\036\052\042\053\040\054\043\056\046\001\002\000" +
    "\026\005\160\030\062\032\060\033\064\034\056\035\057" +
    "\036\061\037\067\040\063\047\066\001\002\000\036\007" +
    "\044\012\053\017\037\020\047\024\041\025\045\027\050" +
    "\041\052\045\054\050\036\052\042\053\040\054\043\056" +
    "\046\001\002\000\026\006\162\030\062\032\060\033\064" +
    "\034\056\035\057\036\061\037\067\040\063\047\066\001" +
    "\002\000\110\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\056\uffdb\001\002\000\110\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\025" +
    "\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\056\uffd8\001\002\000\026\014\165\030\062\032" +
    "\060\033\064\034\056\035\057\036\061\037\067\040\063" +
    "\047\066\001\002\000\036\007\044\012\053\017\037\020" +
    "\047\024\041\025\045\027\050\041\052\045\054\050\036" +
    "\052\042\053\040\054\043\056\046\001\002\000\026\015" +
    "\167\030\062\032\060\033\064\034\056\035\057\036\061" +
    "\037\067\040\063\047\066\001\002\000\110\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\056\uffd5\001\002\000\042\007\044\012\053\017\037\020" +
    "\047\024\041\025\045\027\050\041\052\042\102\045\054" +
    "\050\036\051\171\052\042\053\040\054\043\056\046\001" +
    "\002\000\110\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\056\uffd7\001\002\000\006\026" +
    "\174\043\173\001\002\000\006\051\ufff6\056\ufff6\001\002" +
    "\000\036\007\044\012\053\017\037\020\047\024\041\025" +
    "\045\027\050\041\052\045\054\050\036\052\042\053\040" +
    "\054\043\056\046\001\002\000\026\030\062\032\060\033" +
    "\064\034\056\035\057\036\061\037\067\040\063\043\176" +
    "\047\066\001\002\000\006\051\ufff5\056\ufff5\001\002\000" +
    "\004\043\201\001\002\000\006\051\ufff7\056\ufff7\001\002" +
    "\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000\006\051" +
    "\203\056\017\001\002\000\004\043\204\001\002\000\010" +
    "\002\ufffc\003\ufffc\004\ufffc\001\002\000\010\002\ufffa\003" +
    "\ufffa\004\ufffa\001\002\000\004\002\000\001\002\000\004" +
    "\043\205\001\002\000\010\002\ufffd\003\ufffd\004\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\010\002\004\003\003\004\006\001\001\000" +
    "\004\004\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\201\013\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\015\013\017\001\001\000\004\013" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\023\012\022\001\001\000\004\011" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\050\001\001\000\006\006\077\010\167\001" +
    "\001\000\004\006\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\154\001\001\000\004\006\153\001\001\000\004\007\150" +
    "\001\001\000\004\006\133\001\001\000\004\006\132\001" +
    "\001\000\002\001\001\000\004\006\127\001\001\000\002" +
    "\001\001\000\004\006\054\001\001\000\002\001\001\000" +
    "\004\006\115\001\001\000\004\006\114\001\001\000\004" +
    "\006\113\001\001\000\004\006\112\001\001\000\004\006" +
    "\111\001\001\000\002\001\001\000\004\006\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\073\001\001\000\002\001\001\000\006\006" +
    "\077\010\076\001\001\000\002\001\001\000\004\006\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\126\001\001\000\004\006\123\001\001\000" +
    "\002\001\001\000\004\006\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\136\016\137\001\001\000\002\001\001\000\004\016" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\156\001\001\000\002\001\001\000\004\006\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }


  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action_part00000000(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              programc RESULT =null;
		 RESULT = new programc(curr_lineno(),
                                     new Classes(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_cc 
            {
              Classes RESULT =null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list class_cc 
            {
              Classes RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_cc ::= CLASS TYPEID LBRACE optional_feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                    AbstractTable.idtable.addString("Object"), 
				    f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_cc",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_cc ::= CLASS TYPEID INHERITS TYPEID LBRACE optional_feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_cc",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_cc ::= error SEMI 
            {
              class_c RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_cc",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("optional_feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optional_feature_list ::= f2 
            {
              Features RESULT =null;
		Feature feature2 = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Features(curr_lineno()).appendElement(feature2);  
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("optional_feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optional_feature_list ::= optional_feature_list f2 
            {
              Features RESULT =null;
		Features flist = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature feature2 = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = flist.appendElement(feature2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("optional_feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // f2 ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 
		RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("f2",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // f2 ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), o, t, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("f2",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // f2 ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals f1 = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), o, f1, t, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("f2",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_list ::= formal_1 
            {
              Formals RESULT =null;
		Formal formal1 = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Formals(curr_lineno()).appendElement(formal1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_list ::= formal_list formal_1 
            {
              Formals RESULT =null;
		Formals f2 = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Formal formal1 = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = f2.appendElement(formal1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_1 ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(), o, t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_1",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal_1 ::= OBJECTID COLON TYPEID COMMA 
            {
              Formal RESULT =null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol typ = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new formalc(curr_lineno(), obj, typ); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_1",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(), o); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= OBJECTID actuals 
            {
              Expression RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expressions a = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new dispatch(curr_lineno(),
	                             new object(curr_lineno(), 
	                                        AbstractTable.idtable.addString("self")),
				     n, a); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DOT OBJECTID actuals 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expressions b = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new dispatch(curr_lineno(), e1, n, b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr AT TYPEID DOT OBJECTID actuals 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expressions b = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new static_dispatch(curr_lineno(), e1, t, n, b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), o, e1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(), e1, e2, e3); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= LET OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new let(curr_lineno(), o, t, e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= LET OBJECTID COLON TYPEID IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new new_(curr_lineno(), n); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= LBRACE exp_list RBRACE 
            {
              Expression RESULT =null;
		Expressions exprslist = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(), exprslist); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= CASE expr OF case_list ESAC 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		Expression eone = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression etwo = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new loop(curr_lineno(), eone, etwo); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // actuals ::= LPAREN RPAREN 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("actuals",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actuals ::= LPAREN exp_list RPAREN 
            {
              Expressions RESULT =null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = el; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("actuals",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // case_list ::= case_1 
            {
              Cases RESULT =null;
		Case c1 = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Cases(curr_lineno()).appendElement(c1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // case_list ::= case_1 SEMI 
            {
              Cases RESULT =null;
		Case c1 = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new Cases(curr_lineno()).appendElement(c1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // case_list ::= case_list case_1 SEMI 
            {
              Cases RESULT =null;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Case c1 = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = cl.appendElement(c1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case_1 ::= OBJECTID COLON TYPEID DARROW expr 
            {
              Case RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new branch(curr_lineno(), o, t, e1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_1",12, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_list ::= expr 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exp_list",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_list ::= exp_list COMMA expr 
            {
              Expressions RESULT =null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exp_list",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_list ::= expr SEMI 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exp_list",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_list ::= exp_list expr SEMI 
            {
              Expressions RESULT =null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exp_list",6, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CoolParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
              return CUP$CoolParser$do_action_part00000000(
                               CUP$CoolParser$act_num,
                               CUP$CoolParser$parser,
                               CUP$CoolParser$stack,
                               CUP$CoolParser$top);
    }
}

}
